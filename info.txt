GIT : Software gestor de versiones + desarrollo colaborativo

GITHUB : una pagina web que funciona como servidor (cliente)

PUSH DESDE VS CODE

WEBPACK : Determina que la aplicacion por default carga desde root/src/index.js



ES6 : import / export   
CommonJS : require


JSX : es una extension de JS


function foo(){}

foo()    ===     <foo/>
foo()    ===     <foo></foo>




SASS / LESS : Son preprocessadores de CSS


PROPS : Son las propiedades de un componente



/***********************************************************************************/

IMPLEMENTACION DE BOOTSTRAP EN HEADER.js


import {Container,Button} from "react-bootstrap"

const Header = () => {
    return (
        <Container>
            soy container
            <Button>Soy boton</Button>
        </Container>
    )
}

export default Header


/***********************************************************************************/



COMPONENTES :

Tipos de componentes : 
    _ Estructurales o layout : App , Header , Footer , Main , 
    _ Funcionalidad : Button , Form , Input , Navbas , Cards 



CONDICIONAL TERNARIO : 






PROPS : Son los parametros de un componente


function foo(a,b,c=true){

}



foo(1,2,3)






<foo a="1" />


BEM : https://en.bem.info/methodology/




DESTRUCTURING : Sacar valores de un objeto o un array


const obj = { propiedad:valor }

const {propiedad} = obj



ESTADO : Son variables que se crean adentro de un componente y sirven para guardar informacion que si la modificamos, se va a ver reflejada en el componente automaticamente.



HOOK : Son funciones que integran nuevas funcionalidades a un componente como por ejemplo tener estado, ciclos de vida, etc.


useState : hook que nos da un estado nuevo y un metodo para modificarlo y siempre da un array como resultado




//1) seleccionar el boton
    //2) Se agrega un click al boton
    //3) aumentar la variable contador
    //4) seleccionar los dos textos 
    //5) texto.innerText = ""




CLASS COMPONENT : STATE  + LIFE CYCLE METHODS


class App extends Component {

    constructor(){}

    render(){}

    componentDidMount(){}

    componentDidUpdate(){}

    componentWillUnmount(){}
    
}





CONTAINER VS PRESENTACIONALES : 

Container - > Presentacionales

Container : Componente que contiene todos los componentes que queremos renderizar y suelen tener logica fuerte como por ejemplo : el estado de un componente, el ciclo de vida, metodos , etc

Presentacionales : Componentes que solo presentan una funcionalidad y no tienen logica fuerte como por ejemplo : botones, formularios, inputs, etc

ItemListContainer 



ESTADO : Son variables que se crean adentro de un componente y sirven para guardar informacion que si la modificamos, se va a ver reflejada en el componente automaticamente porque la modificacion de un estado reejecuta todo el componente por completo




Promise : Son objetos que representan una operacion que dura en el tiempo, por ejemplo una peticion a una api y notifican con metodos y callbacks cuando esa operacion termino bien o mal

const promise = new Promise((res,rej)=>{
    const sumar = 1 + 2 
    if(sumar > 3){
        res("ok")
    }else{
        rej("error")
    }
})

promise.then((respuesta)=>{

})

promise.catch((error)=>{
    console.log(error)
})


ItemListContainer ->  ItemList -> Item




let arr = [1,2,3,4,5]

for(let i = 0; i < arr.length; i++){
    const item = arr[i]
}

arr.forEach((item,i)=>{

})


[2, 3, 4, 5, 6]

arr.map((item,i)=>{
    return item + 1
})  


APIs REST : 
AJAX/AXIOS/FETCH/XHR :


cliente ------ HTTP -------> servidor

fetch('https://fakestoreapi.com/products')
            .then(res=>res.json())
            .then(json=>console.log(json))



XSS : Cross Site Scripting




PROPS : 


<Component prop="value"/>

<Component prop="value"> </Component>


<Component>

</Component>




function externa () {

    let contador = 0

    function interna () {
        contador++
        console.log(contador)
    }

    return {
        incrementar : interna
    }
}

const componente = externa()